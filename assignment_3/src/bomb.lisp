;;; Welome to the Assignment 3 of the "Robot Programming with Lisp" course.

;;; In this assignment you should implement a representation of a bomb
;;; and a function that should ask the user to try to neutralize it.

;;; A bomb has a number of wires of different colors situated sequentially
;;; within the mechanism. The mechanism is concealed, so it is impossible
;;; to know what is the sequence of colors inside the bomb.
;;; Below a bomb with 5 wires is illustrated.
;;;    -------
;;;   /       \
;;;   | ||||| |
;;;    \xxxxx/
;;;     |||||
;;; The wires of the bomb come out on the bottom in a shuffled way.
;;; In order to neutralize the bomb it is necessary to cut the wires
;;; outside of the bomb one after another in the correct order,
;;; the way they are situated inside the mechanism.
;;; E.g. if the wires inside the bomb are "red -> blue -> green -> ..."
;;; from the bottom wires first the red one should be cut,
;;; then the blue one, etc. As the neutralizer has no idea of
;;; what is inside the bomb, he will be cutting the wires
;;; most likely just randomly. If the first half of the wires
;;; inside the bomb has all been cut, the bomb is neutralized.
;;; E.g., for 5 wires that would be first 3.
;;; Otherwise, if more than 75% of all the wires has been cut
;;; and the first half has still uncut wires, the bomb explodes.

;;; You are supposed to interactively ask the user to pick up a wire
;;; to cut a certain number of times and then print statements
;;; for either the bomb exploding or the bomb being successfully
;;; neutralized.


;; The list of all possible colors is defined in the *colors* list.
(defvar *colors* '(red green blue gray white black orange purple yellow cyan))

;; The bomb is a function that returns a closure with two lexical
;; bindings: one is the associative list of randomly situated wires list
;; where a color is associated with the state of being cut or not cut (`wires')
;; and the other one is the number of tries the neutralizer is
;; allowed yet to cut a wire before the bomb explodes (`tries-remaining').
;; Note: you may use functionality from the Alexandria library if you want.
;; In general, the bomb should look like the following:
(defun bomb (num-wires)
  "`num-wires' is the number of wires inside the bomb.
`num-wires' should be <= 10 because all the wires have a unique color."
  (let ((tries-remaining ...)
        (wires ...))
    (lambda (wire-color)
      ;; change the state of the wire colored like `wire-color'
      ;; decrement the counter
      ;; check if half of the consecutive wires of the bomb are cut
      ;; either explode or neutralize or do nothing
      )))

;; This is the main function.
(defun try-neutralize ()
  ;; Create a bomb with a certain number of wires.
  ;; Call the function generated by bomb with colors input by the user
  ;; multiple times until the bomb either explodes or is neutralized.
  )


